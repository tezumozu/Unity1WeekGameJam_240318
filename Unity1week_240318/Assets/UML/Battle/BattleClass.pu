@startuml BattleClass
    class BattleGameLoopManager<<GameLoopManager>>{

    }

    class BattleObjectManager<<I_SceneObjectUpdatable>>{
        - [Zenject] BattleSceneManager gameManager
        + InitObject () : I_SceneChangeAlertable
        + UpdateObject ()
    }

    class BattleSceneManager<<I_SceneChangeAlertable>>{
        - E_BattleSceneState sceneState 
        - BattleManager battleManager
        - E_Enemy[5] EnemyList
        - int enemyCount

        + StartGame() : void
    }

    class BattleManager{
        - BattleActor player
        - BattleActor Enemy
        - I_TurnUpdatable[4] turnUpdaterList;
    }

    abstract BattleActor{
        - ActorStatus maxStatus
        + ActorStatus currentStatus
        + Dictionary<E_StatusEffect,bool> statusEffecs
        + readOnly string name
    }

    abstract class TurnUpdater{
        - BattleActor turnActor
        - BattleActor nonTurnActor

        - static readOnly Subject<String[]> updateTextBoxSubject
        - static readOnly Subject<E_BattleUIType> updateBattleUITipeSubject
        - static readOnly Subject<Unit> FinishTurnSubject

        + static IObservable<String[]> updateTextBoxAsync
        + static IObservable<E_BattleUIType> updateBattleUITipeAsync
        + static IObservable<Unit> FinishTurnSubject
        
        + TrunUpdate() : IEnumerator
        + TurnUpdater(Actor,Actor)
    }


    class BattleUI<<Mono>>{

    }



    class PlayerTurn{

    }

    class EnemyTurn{

    }

    class EffectCheckTrun{

    }

    BattleManager o--> TurnUpdater : Observe

    TurnUpdater <|-- PlayerTurn
    TurnUpdater <|-- EnemyTurn
    TurnUpdater <|-- EffectCheckTrun

    TurnUpdater <-- BattleUI : Observe




    

    


@enduml